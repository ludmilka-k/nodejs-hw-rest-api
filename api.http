### Get Contacts List
### router.get('/', ctrl.getAllContacts);
GET http://localhost:3000/api/contacts?page1&limit=5&favorite=true
Authorization:Bearer {{token}}

### Get One Contact
### router.get('/:contactId', ctrl.getContactById);
GET http://localhost:3000/api/contacts/650a13492d2fe9205b0ab1bf
Authorization:Bearer {{token}}

### Add Contact
### router.post('/', validatedContacts(schemaValidation), ctrl.createContact);
POST http://localhost:3000/api/contacts
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Gggg Hhhhh",
  "email": "gggg@hhhh.com",
  "phone": "(999) 321-7654",
  "favorite": true
}

### Delete Contact
### router.delete('/:contactId', ctrl.removeContactById);
DELETE http://localhost:3000/api/contacts/64fdc427300cd41db445a419
Authorization: Bearer {{token}}

### Update Contact
### router.put('/:contactId', ctrl.updateContactById);
PUT http://localhost:3000/api/contacts/650a13492d2fe9205b0ab1bf
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Janete Vorobey",
  "email": "qweqwe-good-owner@qw.com",
  "phone": "(999) 321-7654",
  "favorite": true
}

### Update Field Favorite
### router.patch('/:contactId/favorite', ctrl.updateStatusContact);
PATCH http://localhost:3000/api/contacts/64ff643a1f8d1b4082e273e2/favorite
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "favorite": true
}

### Register User
### authRouter.post('/:register', authCtrl.register);
POST http://localhost:3000/api/auth/register
Content-Type: application/json

{
  "email": "l.kurochkina@ukr.net",
  "password": "123456"
}


### Login User
### authRouter.post('/:login', authCtrl.login);
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "l.kurochkina@ukr.net",
  "password": "123456"
}

> {%
    client.global.set("token", response.body.token);
    client.log("received token: " + client.global.get("token"))
 %}


### Current User
### authRouter.get('/:curent', authCtrl.getCurrent);
GET http://localhost:3000/api/auth/current
Authorization:Bearer {{token}}

### Logout User
### authRouter.post('/:logout', authCtrl.logout);
POST http://localhost:3000/api/auth/logout
Authorization: Bearer {{token}}

### Change Subscription
### authRouter.patch('/:current/subscription', authCtrl.patchSubscription);
PATCH http://localhost:3000/api/auth/current/subscription
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "subscription": "pro"
}

### Set Avatar
### authRouter.patch('/:avatars', authCtrl.updateAvatar);
PATCH http://localhost:3000/api/auth/avatars HTTP/1.1
Authorization: Bearer {{token}}
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="avatar"; filename="phonebook.jpg"

< ./public/avatars/phonebook.jpg
--WebAppBoundary--

### Send Verify Email
### authRouter.post('./:verify/verificationCode', authCtrl.verify
GET http://localhost:3000/api/auth/verify/verificationCode
Content-Type: application/json

{
  "email": "l.kurochkina@ukr.net",
  "verificationCode": "Jn6XzZvRpyqwkbTCGsaNd"
}

### Resend Verify Email
### authRouter.post('./:verify', authCtrl.resendVerifyEmail
POST http://localhost:3000/api/auth/verify
Content-Type: application/json

{
  "email": "l.kurochkina@ukr.net"
}
